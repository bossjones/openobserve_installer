@version: 4.7
@include "scl.conf"
@include "/etc/syslog-ng/conf.d/*.conf"

# Main options block configuring global syslog-ng behavior
options {
    # Disable automatic hostname rewriting in log messages
    chain-hostnames(no);

    # Send log messages immediately instead of buffering them
    flush-lines(0);

    # Disable DNS lookups for performance reasons
    use-dns(no);

    # Don't use fully qualified domain names
    use-fqdn(no);

    # Disable DNS caching since DNS lookups are disabled
    dns-cache(no);

    # Set ownership of created log files to abc
    owner("abc");

    # Set group ownership of created log files to users
    group("users");

    # Set file permissions to 0640 (user:rw group:r others:-)
    perm(0640);

    # Configure statistics collection
    stats(
        # Disable periodic stats collection by setting frequency to 0
        freq(0)
    );

    # Filter out messages with invalid hostname "gconfd"
    bad-hostname("^gconfd$");

    # Set timezone for log timestamps to UTC
    time-zone("UTC");
};

# Define a source for local system logs
source s_local {
    # Collect internal messages generated by syslog-ng itself (e.g., startup, shutdown, errors)
    internal();

    # Collect messages from the local system's syslog facility
    # This includes messages from system services, daemons, and applications
    # that use the standard syslog facility
    # system();

    # Collect messages from network sources using default syslog ports
    # This typically listens on UDP/514 for traditional syslog messages
    # network();
};

# Define a source for network-based log collection
source s_network {
    # Configure UDP log reception
    network(
        # Use UDP transport protocol
        transport("udp")
        # Listen on port 1514
        port(1514)
        # Don't attempt to parse the incoming messages
        flags(no-parse)
    );

    # Configure first TCP log reception
    network(
        # Use TCP transport protocol
        transport("tcp")
        # Listen on port 1601
        port(1601)
        # Don't attempt to parse the incoming messages
        flags(no-parse)
    );

    # Configure second TCP log reception
    network(
        # Use TCP transport protocol
        transport("tcp")
        # Listen on port 16514
        port(16514)
        # Don't attempt to parse the incoming messages
        flags(no-parse)
    );
};

# source s_journald {
#     systemd-journal(
#         prefix(".journald.")
#         max-field-size(65536)
#     );
# };

# Define a source for file-based log collection
source s_files {
    # Each file() directive monitors a specific log file
    # follow-freq(1) checks for changes every second
    # flags(no-parse) prevents syslog-ng from trying to parse the content
    file("/data/unifi-core/logs/apiKey.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/app.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/apps.log" follow-freq(1) flags(no-parse));
    # file("/data/unifi-core/logs/auth.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/backup.export.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/backup.import.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/backup.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/backup.recovery.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/backup.schedule.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/chiper.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.access.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.api.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.applicationEvents.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.backup.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.devices.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.dm.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.invites.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.notifications.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.teleport.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud.uid.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/cloud1.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/consoleGroup.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/controllers.clientList.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/controllers.deviceList.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/controllers.deviceTopology.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/controllers.discovery.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/controllers.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/controllers.refreshSsoRoles.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/database.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/discovery.client.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/discovery.client1.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/discovery.client2.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/discovery.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/discovery.responder.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/errors.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/errors1.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/fingerprint.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/firmware.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/floorplans.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/grpc.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/hardware.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/health.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/health1.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/health2.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/http.apiProxy.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/http.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/http.uiProxy.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/http.wsProxy.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/http1.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/http2.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/internetIssues.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/ipc.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/ipc.messageBox.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/ipc.ucp4.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/linkShare.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/messageBox.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/nginx-access.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/nginx-error.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/notifications.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/notifications.storage.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/redux.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/redux.wsUpdates.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/sdnotify.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/service.crash.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/service.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/service1.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/service2.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/sharedTokens.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/sso.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/stackable.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/system.directRemoteConnection.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/system.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/system.networking.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/system.state.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/system.storage.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/system.support.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/system.ustorage.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/systemd.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/taskQueue.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/taskTracker.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/tools.apt.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/tools.systool.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/trace.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/uisp.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/ulp.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/unvrFlashStorageMigration.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/uum.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/webrtc_addon.log" follow-freq(1) flags(no-parse));
    file("/data/unifi-core/logs/webrtc.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/access.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/gc.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/hotspot.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/hs_err_pidunifi.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/inform_request.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/migration.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/mongod.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/server.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/startup.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/state.log" follow-freq(1) flags(no-parse));
    file("/srv/unifi/logs/tasks.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/access.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/gc.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/hotspot.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/hs_err_pidunifi.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/inform_request.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/migration.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/mongod.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/server.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/startup.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/state.log" follow-freq(1) flags(no-parse));
    file("/usr/lib/unifi/logs/tasks.log" follow-freq(1) flags(no-parse));
    file("/var/log/apt/history.log" follow-freq(1) flags(no-parse));
    file("/var/log/apt/term.log" follow-freq(1) flags(no-parse));
    file("/var/log/auth.log" follow-freq(1) flags(no-parse));
    file("/var/log/dnsmasq.log" follow-freq(1) flags(no-parse));
    file("/var/log/freeradius/radius.log" follow-freq(1) flags(no-parse));
    file("/var/log/lighttpd/error.log" follow-freq(1) flags(no-parse));
    file("/var/log/messages" follow-freq(1) flags(no-parse));
    file("/var/log/nginx/access.log" follow-freq(1) flags(no-parse));
    file("/var/log/nginx/error.log" follow-freq(1) flags(no-parse));
    file("/var/log/postgresql/postgresql-14-main-upgrade.log" follow-freq(1) flags(no-parse));
    file("/var/log/postgresql/postgresql-14-main.log" follow-freq(1) flags(no-parse));
    file("/var/log/ubnt-daemon.log" follow-freq(1) flags(no-parse));
    file("/var/log/unattended-upgrades/unattended-upgrades-dpkg.log" follow-freq(1) flags(no-parse));
    file("/var/log/unattended-upgrades/unattended-upgrades-shutdown.log" follow-freq(1) flags(no-parse));
    file("/var/log/unattended-upgrades/unattended-upgrades.log" follow-freq(1) flags(no-parse));
};

# Define a source for metrics collection
source s_metrics {
    # Monitor the syslog-ng socket file for metrics data
    file("/config/syslog-ng.sock" flags(no-parse));
};

# Filter messages with debug severity level
filter f_dbg {
    level(debug);
};

# Filter messages with info severity level
filter f_info {
    level(info);
};

# Filter messages with notice severity level
filter f_notice {
    level(notice);
};

# Filter messages with warning severity level
filter f_warn {
    level(warn);
};

# Filter messages with error severity level
filter f_err {
    level(err);
};

# Filter messages with critical to emergency severity levels (crit, alert, emerg)
filter f_crit {
    level(crit .. emerg);
};


# Define a destination for metrics data
destination d_metrics {
    # Write metrics to a Unix socket file
    file(
        # Socket file path
        "/config/syslog-ng.sock"
        # Set file ownership to user 'abc'
        owner("abc")
        # Set file group to 'users'
        group("users")
        # Set file permissions to read/write/execute for all (777)
        perm(0777)
    );
};

# parser p_nginx_patterndb {
#     db-parser(
#         file("/etc/syslog-ng/patterndb.d/nginx-error.xml")
#     );
# };

# log {
#     source(s_nginx);
#     parser(p_nginx_patterndb);
#     destination(d_parsed_logs);
# };

# Define a destination for sending logs to OpenObserve
destination d_openobserve_http {
    # Configure OpenObserve log destination
    openobserve-log(
        # OpenObserve server URL
        url("http://openobserve")
        # Server port number
        port(5080)
        # Organization name in OpenObserve
        organization("default")
        # Stream/index name for the logs
        stream("syslog-ng")
        # Authentication credentials
        user("admin@example.com")
        password("Complexpass#123")
    );
};

# Define the main logging path
log {
    # Specify all source inputs
    source(s_local);      # Local system logs
    source(s_network);    # Network-based logs
    # source(s_journald); # Systemd journal logs (commented out)
    source(s_files);      # File-based logs
    source(s_metrics);    # Metrics data

    # Specify destinations
    # destination(d_openobserve);     # Original OpenObserve destination (commented out)
    destination(d_openobserve_http);  # HTTP-based OpenObserve destination

    destination(d_metrics);         # Metrics destination (commented out)

    # Enable flow control to prevent message loss
    flags(flow-control);

};
