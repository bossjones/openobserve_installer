services:
  minio:
    image: quay.io/minio/minio:RELEASE.2024-10-29T16-01-48Z
    container_name: openobserve-sqlite-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_REGION_NAME: "us-east-1"
      MINIO_HTTP_TRACE: "/dev/stdout"
      MINIO_LOG_QUERY: "on"
      MINIO_LOG_LEVEL: "debug"
      MINIO_AUDIT_WEBHOOK_ENABLE: "on"
      MINIO_AUDIT_WEBHOOK_ENDPOINT: "http://syslog-ng:1514"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    command: server /data --console-address ":9093"
    ports:
      - "9092:9000"
      - "9093:9093"
    volumes:
      - minio_sqlite_data:/data
      - ./minio_audit_logs:/minio/audit/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 10
    restart: unless-stopped
    depends_on:
      syslog-ng:
        condition: service_healthy

  syslog-ng:
    image: lscr.io/linuxserver/syslog-ng:4.7.1
    container_name: syslog-ng-sqlite
    cap_add:
      # Allows the container to bind to privileged ports (ports below 1024)
      - CAP_NET_BIND_SERVICE
      # Allows the container to perform syslog operations and access kernel logging
      - CAP_SYSLOG
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - LOG_TO_STDOUT=true
    volumes:
      - ./containers/syslog-ng/config:/config
      - ./containers/syslog-ng/config/conf.d/openobserve.conf:/config/conf.d/openobserve.conf
      # Application specific log directories
      - ./logs/usr/lib/unifi/logs:/var/log/unifi:ro
      - ./logs/var/log/postgresql:/var/log/postgresql:ro
      - ./logs/var/log/nginx:/var/log/nginx:ro
      - ./logs/var/log/apt:/var/log/apt:ro
      - ./logs/var/log/unattended-upgrades:/var/log/unattended-upgrades:ro
      - ./logs/data/unifi-core/logs:/var/log/unifi-core:ro
      - ./logs/srv/unifi/logs:/var/log/unifi-srv:ro
    ports:
      - 1515:1514/udp
      - 1602:1601/tcp
      - 16515:16514/tcp
    restart: unless-stopped
    depends_on: []
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep syslog-ng | grep -v grep"]
      interval: 30s
      timeout: 10s
      retries: 10

  axosyslog-metrics-exporter:
    image: ghcr.io/axoflow/axosyslog-metrics-exporter:latest
    container_name: axosyslog-metrics-exporter
    restart: unless-stopped
    ports:
      - "9577:9577"
    volumes:
      - ./containers/syslog-ng/config:/config
    command:
      - "--socket.path=/config/syslog-ng.ctl"
    depends_on:
      syslog-ng:
        condition: service_healthy

  # syslog-ng-exporter:
  #   image: balabit/syslog-ng-exporter:latest
  #   container_name: syslog-ng-exporter
  #   ports:
  #     - "9577:9577"
  #   command:
  #     - "--syslog-ng.socket=/var/run/syslog-ng.sock"
  #   volumes:
  #     - ./containers/syslog-ng/socket:/var/run/

  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:v0.13.2-rc4-debug
    container_name: openobserve-sqlite
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
      syslog-ng:
        condition: service_healthy
    environment:
      ZO_ROOT_USER_EMAIL: "admin@example.com"
      ZO_ROOT_USER_PASSWORD: "Complexpass#123"
      ZO_META_STORE: "sqlite"
      ZO_S3_PROVIDER: "minio"
      ZO_S3_SERVER_URL: "http://minio:9000"
      ZO_S3_BUCKET_NAME: "openobserve-sqlite"
      ZO_S3_REGION_NAME: "us-east-1"
      ZO_S3_ACCESS_KEY: "minioadmin"
      ZO_S3_SECRET_KEY: "minioadmin123"
      ZO_S3_BUCKET_PREFIX: "sqlite"
      RUST_LOG: "debug"
      ZO_LOG_LEVEL: "debug"
      ZO_LOG_FORMAT: "text"
      ZO_LOCAL_MODE_STORAGE: "s3"
      ZO_S3_FORCE_PATH_STYLE: true
      ZO_TCP_PORT: 5515
      ZO_UDP_PORT: 5515
      ZO_LOCAL_MODE: true
      ZO_TELEMETRY: false
    ports:
      - "5081:5080"
    volumes:
      - openobserve_sqlite_data:/data


  log-generator:
    build:
      context: ./containers/syslog_log_generator
      dockerfile: Dockerfile
    container_name: openobserve-sqlite-log-generator

    environment:
      REMOTE_HOSTNAME_LOGS: "openobserve-sqlite"
    depends_on:
      # openobserve:
      #   condition: service_healthy
      syslog-ng:
        condition: service_healthy
    volumes:
      - ./containers/syslog_log_generator/generate_logs.sh:/usr/local/bin/generate_logs.sh
      - ./containers/syslog_log_generator/syslog_gen.py:/usr/local/bin/syslog_gen.py
      - ./containers/syslog_log_generator/sample_logs.txt:/usr/local/bin/sample_logs.txt
    networks:
      - default
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v3.0.1
    container_name: prometheus_sbx
    volumes:
      - ./docker/prometheus/:/etc/prometheus/
      - sbx_prometheus:/prometheus
    tty: true
    stdin_open: true
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:9090'
      - '--log.level=info'
      # - '--enable-feature=remote-write-receiver'
      - '--query.lookback-delta=30s'
    ports:
      - "${PROMETHEUS_PORT:-9999}:9090"
    restart: unless-stopped
    networks:
      - default
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 10
    # depends_on:
    #   axosyslog-metrics-exporter:
    #     condition: service_healthy

  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana_sbx
    environment:
      GF_SECURITY_ADMIN_PASSWORD: foobar
      GF_USERS_ALLOW_SIGN_UP: false
      GRAFANA_USERNAME: admin
      GRAFANA_PASSWORD: foobar
      # GF_INSTALL_PLUGINS: grafana-clock-panel,natel-discrete-panel,grafana-piechart-panels
      GF_INSTALL_PLUGINS: grafana-clock-panel
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_DATAPROXY_TIMEOUT: 310
      GF_LOG_LEVEL: info
      GF_DATAPROXY_LOGGING: true
      GF_EXPLORE_ENABLED: true
      GF_PATHS_CONFIG: /etc/grafana/grafana.ini
    volumes:
      - sbx_grafana:/var/lib/grafana
      - ./docker/grafana/etc/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_PORT:-3333}:3000"
    restart: unless-stopped
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      prometheus:
        condition: service_healthy

networks:
  default:
    name: openobserve-sqlite-network

volumes:
  minio_sqlite_data:
  openobserve_sqlite_data:
  sbx_prometheus:
  sbx_grafana:
  syslog_ng_socket:
