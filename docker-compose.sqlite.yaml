services:
  minio:
    image: quay.io/minio/minio:latest
    container_name: openobserve-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_REGION_NAME: "us-east-1"
      MINIO_HTTP_TRACE: "/dev/stdout"
      MINIO_LOG_QUERY: "on"
      MINIO_LOG_LEVEL: "debug"
      # MINIO_ACCESS_KEY: minio123
      # MINIO_PROMETHEUS_AUTH_TYPE: public
      # MINIO_SECRET_KEY: minio456
    command: server /data --console-address ":9091"
    ports:
      - "9090:9000"
      - "9091:9091"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  syslog-ng:
    image: lscr.io/linuxserver/syslog-ng:latest
    container_name: syslog-ng
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./containers/syslog-ng/config/syslog-ng.conf:/config/syslog-ng.conf
      # - ./syslog-ng/config:/config
      - ./syslog-ng/logs:/var/log
    ports:
      - 1514:1514/udp
      - 1601:1601/tcp
      - 16514:16514/tcp
    restart: unless-stopped
    depends_on:
      - openobserve

  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:latest
    container_name: openobserve
    depends_on:
      minio:
        condition: service_healthy
    environment:
      ZO_ROOT_USER_EMAIL: "admin@example.com"
      ZO_ROOT_USER_PASSWORD: "Complexpass#123"
      ZO_META_STORE: "sqlite"
      ZO_S3_PROVIDER: "minio"
      ZO_S3_SERVER_URL: "http://minio:9000"
      ZO_S3_BUCKET_NAME: "openobserve"
      ZO_S3_REGION_NAME: "us-east-1"
      ZO_S3_ACCESS_KEY: "minioadmin"
      ZO_S3_SECRET_KEY: "minioadmin123"
      ZO_S3_BUCKET_PREFIX: "local"
      RUST_LOG: "debug"
      ZO_LOG_LEVEL: "debug"
      ZO_LOG_FORMAT: "text"
      # LOCAL_MODE: false
      ZO_LOCAL_MODE_STORAGE: "s3"
      ZO_S3_FORCE_PATH_STYLE: true
      ZO_TCP_PORT: 5514
      ZO_UDP_PORT: 5514
      ZO_TELEMETRY: false
    ports:
      - "5080:5080"
    volumes:
      - openobserve_data:/data


  log-generator:
    build:
      context: ./containers/syslog_log_generator
      dockerfile: Dockerfile
    container_name: openobserve-log-generator
    depends_on:
      minio:
        condition: service_healthy

    volumes:
      - ./containers/syslog_log_generator/generate_logs.sh:/usr/local/bin/generate_logs.sh
    networks:
      - default
    restart: unless-stopped

networks:
  default:
    name: openobserve-network

volumes:
  postgres_data:
  minio_data:
  openobserve_data:
